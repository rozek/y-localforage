{"version":3,"file":"y-localforage.esm.js","sources":["../src/y-localforage.ts"],"sourcesContent":["import * as Y         from 'yjs'\nimport { Observable } from 'lib0/observable'\n\n// Store Key Pattern: [<subdoc-guid>]@<timestamp>-<n>\n\n//namespace LocalForageProvider {\n  const GUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}@/i\n\n  type SubDocChanges = {\n    added:Set<Y.Doc>, removed:Set<Y.Doc>, loaded:Set<Y.Doc>\n  }\n\n  export class LocalForageProvider extends Observable<any> {\n    private _Store:any\n    private _sharedDoc:Y.Doc\n    private _SuperProvider?:LocalForageProvider\n\n    private _isBusy:boolean  = false\n    private _UpdateLimit:number = 500\n\n    private _pendingUpdates:number   = 0\n    private _completedUpdates:number = 0\n\n    private _enqueuedUpdates:Uint8Array[] = []\n\n    private _SubDocMap:Map<Y.Doc,LocalForageProvider> = new Map()\n\n    constructor (\n      Store:any, sharedDoc:Y.Doc, UpdateLimit:number = 500,\n      SuperProvider?:LocalForageProvider\n    ) {\n      super()\n\n      this._Store         = Store\n      this._sharedDoc     = sharedDoc\n      this._SuperProvider = SuperProvider\n\n      this._isBusy      = false\n      this._UpdateLimit = UpdateLimit\n\n      this._storeUpdate = this._storeUpdate.bind(this)\n      sharedDoc.on('update', this._storeUpdate)\n\n      this._manageSubDocs = this._manageSubDocs.bind(this)\n      sharedDoc.on('subdocs', this._manageSubDocs)\n\n      this.destroy = this.destroy.bind(this)\n      sharedDoc.on('destroy', this.destroy)\n\n      this._applyStoredUpdates()     // is safe, even while updated or destroyed\n    }\n\n  /**** isSynced - is true while this provider and its sharedDoc are in-sync ****/\n\n    get isSynced ():boolean {\n      return (this._pendingUpdates === 0)\n    }\n\n  /**** isFullySynced - is true while this._sharedDoc and all subdocs are in-sync ****/\n\n    get isFullySynced ():boolean {\n      return (\n        (this._pendingUpdates === 0) &&\n        Array.from(this._SubDocMap.values()).every(\n          (SubProvider) => SubProvider.isSynced\n        )\n      )\n    }\n\n  /**** SubDocIsSynced - is true while the given SubDoc is in-sync ****/\n\n    public SubDocIsSynced (SubDoc:Y.Doc):boolean {\n      const SubDocProvider = this._SubDocMap.get(SubDoc)\n      return (SubDocProvider != null) && SubDocProvider.isSynced\n    }\n\n  /**** destroy - destroys persistence, invalidates provider ****/\n\n    async destroy ():Promise<void> {\n      if (this._Store == null) { return }         // provider has been destroyed\n\n      this._sharedDoc.off('update',  this._storeUpdate)\n      this._sharedDoc.off('subdocs', this._manageSubDocs)\n      this._sharedDoc.off('destroy', this.destroy)\n\n      if (! this.isSynced) {\n        this._pendingUpdates = 0\n        this.emit('sync-aborted',[this,1.0])\n      }\n\n      const KeysToDelete = (\n        this._SuperProvider == null\n        ? await this._StorageKeys()\n        : await this._StorageSubKeysFor(this._sharedDoc)\n      )\n\n      let Store = this._Store\n// @ts-ignore allow clearing of \"this._Store\"\n      this._Store = undefined\n\n      for (let i = 0, l = KeysToDelete.length; i < l; i++) {\n        await Store.removeItem(KeysToDelete[i])\n      }\n    }\n\n  /**** _applyStoredUpdates - applies all stored (incremental) updates to sharedDoc ****/\n\n    private async _applyStoredUpdates ():Promise<void> {\n      this._isBusy = true        // prevents update entries from being persisted\n        try {\n          this._pendingUpdates = 1 // very bad trick to keep this.isSynced false\n            const UpdateKeys = (\n              this._SuperProvider == null\n              ? await this._StorageKeys()\n              : await this._StorageSubKeysFor(this._sharedDoc)\n            )\n          this._pendingUpdates--                  // compensate trick from above\n\n          if (UpdateKeys.length > 0) {\n            this._pendingUpdates += UpdateKeys.length; this._reportProgress()\n\n            for (let i = 0, l = UpdateKeys.length; i < l; i++) {\n              if (this._Store == null) { return } // provider has been destroyed\n\n              const Update = await this._Store.getItem(UpdateKeys[i])\n              Y.applyUpdate(this._sharedDoc, Update, this)\n                                          // updates can be applied in any order\n              this._completedUpdates++; this._reportProgress()\n            }\n            this._sharedDoc.emit('load',[this])         // resolves \"whenLoaded\"\n          } else {\n            this._reportProgress()\n          }\n        } catch (Signal:any) {\n          this._breakdownWith(\n            'could not restore document from persistence', Signal\n          )\n        }\n      this._isBusy = false              // allows update entries to be persisted\n\n      if (this._enqueuedUpdates.length > 0) {\n        this._storeUpdatesAndCompact()\n      }\n    }\n\n  /**** _storeUpdate - stores a given (incremental) update ****/\n\n    private _storeUpdate (Update:Uint8Array, Origin?:any):void {\n      if (this._Store == null) { return }         // provider has been destroyed\n\n      if (Origin !== this) {          // ignore updates applied by this provider\n        this._pendingUpdates++; this._reportProgress()\n\n        this._enqueuedUpdates.push(Update)\n        if (! this._isBusy) {\n          this._storeUpdatesAndCompact()\n        }            // never write (and compact!) multiple updates concurrently\n      }\n    }\n\n  /**** _storeUpdatesAndCompact - stores enqueued updates and compacts ****/\n\n    private async _storeUpdatesAndCompact ():Promise<void> {\n      if (this._Store == null) { return }         // provider has been destroyed\n\n      this._isBusy = true\n        const UpdateKeys = (\n          this._SuperProvider == null\n          ? await this._StorageKeys()\n          : await this._StorageSubKeysFor(this._sharedDoc)\n        )\n\n        while ((this._Store != null) && (this._enqueuedUpdates.length > 0)) {\n          try {\n            await this._storeNextUpdateAmong(UpdateKeys)\n            if (this._Store == null) { return }   // provider has been destroyed\n          } catch (Signal) {\n            this._breakdownWith(\n              'could not persist document update', Signal\n            )\n          }\n\n          if (UpdateKeys.length >= this._UpdateLimit) {\n            try {\n              await this._compactUpdates(UpdateKeys)\n            } catch (Signal) {\n              this._breakdownWith(\n                'could not compact document updates', Signal\n              )\n            }\n          }\n        }\n      this._isBusy = false\n    }\n\n  /**** _storeNextUpdateAmong - stores next enqueued updates ****/\n\n    private async _storeNextUpdateAmong (UpdateKeys:string[]):Promise<void> {\n      let UpdateKey:string = this._newUpdateKeyAmong(UpdateKeys)\n      UpdateKeys.push(UpdateKey)\n\n      await this._Store.setItem(UpdateKey,this._enqueuedUpdates[0])\n\n      this._enqueuedUpdates.shift()\n      this._completedUpdates++; this._reportProgress()\n    }\n\n  /**** _compactUpdates - compacts the given list of updates ****/\n\n    private async _compactUpdates (UpdateKeys:string[]):Promise<void> {\n      const thisHadEnqueuedUpdates = (this._enqueuedUpdates.length > 0)\n        this._pendingUpdates -= this._enqueuedUpdates.length\n        this._enqueuedUpdates = []      // all enqueued updates will be included\n\n        let CompactKey:string = this._newUpdateKeyAmong(UpdateKeys)\n\n        await this._Store.setItem(CompactKey,Y.encodeStateAsUpdate(this._sharedDoc))\n        if (this._Store == null) { return }       // provider has been destroyed\n\n        for (let i = 0, l = UpdateKeys.length; i < l; i++) {\n          await this._Store.removeItem(UpdateKeys[i])\n          if (this._Store == null) { return }     // provider has been destroyed\n        }\n\n        UpdateKeys.splice(0,UpdateKeys.length, CompactKey)\n      if (thisHadEnqueuedUpdates) { this._reportProgress() }\n    }\n\n  /**** _newUpdateKeyAmong - generates a new unique update key ****/\n\n    private _newUpdateKeyAmong (UpdateKeys:string[]):string {\n      let KeyBase:string = (\n        (this._SuperProvider == null ? '' : this._sharedDoc.guid) + '@' + Date.now()\n      ), KeySuffix:number = 0\n        let UpdateKey:string = KeyBase + '-' + KeySuffix\n        while (UpdateKeys.indexOf(UpdateKey) >= 0) {\n          KeySuffix++\n          UpdateKey = KeyBase + '-' + KeySuffix\n        }\n      return UpdateKey\n    }\n\n  /**** _removeStoredSubDoc - removes a single stored subdoc ****/\n\n    private async _removeStoredSubDoc (SubDoc:Y.Doc):Promise<void> {\n      let KeysToDelete = await this._StorageSubKeysFor(SubDoc)\n      try {\n        for (let i = 0, l = KeysToDelete.length; i < l; i++) {\n          await this._Store.removeItem(KeysToDelete[i])\n          if (this._Store == null) { return }     // provider has been destroyed\n        }\n      } catch (Signal) {\n        this._breakdownWith(\n          'could not remove persistence for subdoc ' + SubDoc.guid, Signal\n        )\n      }\n    }\n\n  /**** _breakdown - breaks down this provider ****/\n\n    private _breakdown ():void {\n// @ts-ignore allow clearing of \"this._Store\"\n      this._Store = undefined\n\n      this._isBusy = false\n\n      if (! this.isSynced) {\n        this._enqueuedUpdates = []\n        this._pendingUpdates  = 0\n        this.emit('sync-aborted',[this,1.0])\n      }\n\n      this._SubDocMap.forEach((Provider) => Provider._breakdown())\n    }\n\n  /**** _breakdownWith - breaks down this provider after failure ****/\n\n    private _breakdownWith (Message:string, Reason?:any):never {\n      this._breakdown()\n\n      throw new Error(\n        Message + (Reason == null ? '' : ', reason: ' + Reason)\n      )\n    }\n\n  /**** _manageSubDocs - manages subdoc persistences ****/\n\n    private async _manageSubDocs (Changes:SubDocChanges):Promise<void> {\n      const providePersistenceFor = (SubDoc:Y.Doc) => {\n        if (\n          ! this._SubDocMap.has(SubDoc) &&\n          (this._sharedDoc.guid !== SubDoc.guid)     // \"doc copies\" are strange\n        ) {\n          const SubDocProvider = new LocalForageProvider(\n            this._Store, SubDoc, this._UpdateLimit, this\n          )\n          this._SubDocMap.set(SubDoc,SubDocProvider)\n        }\n      }\n\n      const { added, removed, loaded } = Changes\n\n      if (removed != null) {\n        let SubDocList:Y.Doc[] = Array.from(removed.values())\n        for (let i = 0, l = SubDocList.length; i < l; i++) {\n          const SubDoc = SubDocList[i]\n\n          const Provider = this._SubDocMap.get(SubDoc)\n          if (Provider != null) { Provider._breakdown() }\n\n          this._SubDocMap.delete(SubDoc)\n\n          if (\n            (this._sharedDoc != null) &&          // \"doc copies\" are strange...\n            (this._sharedDoc.guid !== SubDoc.guid) &&\n            Array.from(this._sharedDoc.getSubdocs().values()).every(\n              (existingSubDoc) => (existingSubDoc.guid !== SubDoc.guid)\n            )                                                       // ...really\n          ) {\n            await this._removeStoredSubDoc(SubDoc)\n          }  // warning: pot. race condition if \"guid\" is immediately used again\n        }\n      }\n\n      if (loaded != null) {\n        loaded.forEach((SubDoc:Y.Doc) => {\n          providePersistenceFor(SubDoc)\n        })\n      }\n    }\n\n  /**** _reportProgress - emits events reporting synchronization progress ****/\n\n    private _reportProgress ():void {\n      switch (true) {\n        case (this._pendingUpdates === 0):\n          this._completedUpdates = 0\n          this.emit('synced',[this])\n          this._sharedDoc.emit('sync',[this])     // resolves \"whenSynced\", once\n\n          if (this._SuperProvider != null) {\n            this._SuperProvider.emit('subdoc-synced',[this,this._sharedDoc])\n          }\n          break\n        case (this._completedUpdates === 0) && (this._pendingUpdates === 1):\n          this.emit('sync-started',[this,0.0])\n          break\n        case (this._completedUpdates === this._pendingUpdates):\n          this.emit('sync-finished',[this,1.0])\n\n          this._pendingUpdates = this._completedUpdates = 0\n          this.emit('synced',[this])\n          this._sharedDoc.emit('sync',[this])     // resolves \"whenSynced\", once\n\n          if (this._SuperProvider != null) {\n            this._SuperProvider.emit('subdoc-synced',[this,this._sharedDoc])\n          }\n          break\n        default:\n          const Progress = this._completedUpdates/this._pendingUpdates\n          this.emit('sync-continued',[this,Progress])\n      }\n    }\n\n  /**** _StorageKeys - lists all keys used for sharedDoc itself ****/\n\n    private async _StorageKeys ():Promise<string[]> {\n      let StoreKeys:string[] = await this._Store.keys()\n      return StoreKeys.filter((Key) => Key.startsWith('@'))\n    }\n\n  /**** _StorageSubKeys - lists all keys used for subdocs of sharedDoc ****/\n\n    private async _StorageSubKeys ():Promise<string[]> {\n      let StoreKeys:string[] = await this._Store.keys()\n      return StoreKeys.filter((Key) => ! Key.startsWith('@'))\n    }\n\n  /**** _StorageSubKeysFor - lists all keys used for a given subdoc ****/\n\n    private async _StorageSubKeysFor (SubDoc:Y.Doc):Promise<string[]> {\n      const KeyPrefix = SubDoc.guid + '@'\n\n      let StoreKeys:string[] = await this._Store.keys()\n      return StoreKeys.filter((Key) => Key.startsWith(KeyPrefix))\n    }\n  }\n//}\n"],"names":["_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","prototype","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","_for","test","update","body","stage","shouldContinue","updateValue","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","reject","LocalForageProvider","_Observable","Store","sharedDoc","UpdateLimit","SuperProvider","call","_Store","_sharedDoc","_SuperProvider","_isBusy","_UpdateLimit","_pendingUpdates","_completedUpdates","_enqueuedUpdates","_SubDocMap","Map","_storeUpdate","on","_manageSubDocs","destroy","_applyStoredUpdates","_proto","SubDocIsSynced","SubDoc","SubDocProvider","get","isSynced","_this2","Promise","resolve","off","emit","_StorageKeys","_StorageSubKeysFor","KeysToDelete","undefined","i","l","length","_temp","removeItem","_exit","_temp5","_result","_this3","_storeUpdatesAndCompact","_temp4","_catch","UpdateKeys","_temp3","_result2","_reportProgress","_temp2","_exit2","getItem","Update","Y","applyUpdate","Signal","_breakdownWith","Origin","push","_this4","_exit3","_temp11","_result5","_temp10","_temp9","_result4","_temp7","_temp6","_compactUpdates","_temp8","_storeNextUpdateAmong","_this5","UpdateKey","_newUpdateKeyAmong","setItem","shift","_this6","thisHadEnqueuedUpdates","CompactKey","encodeStateAsUpdate","_exit4","_temp13","_result6","splice","_temp12","KeyBase","guid","Date","now","KeySuffix","indexOf","_removeStoredSubDoc","_this7","_exit5","_breakdown","forEach","Provider","Message","Reason","Error","Changes","_temp16","loaded","providePersistenceFor","_this8","has","set","removed","_temp15","SubDocList","Array","from","values","_temp14","getSubdocs","every","existingSubDoc","keys","StoreKeys","filter","Key","startsWith","_StorageSubKeys","KeyPrefix","key","SubProvider","Observable"],"mappings":"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"}